syntax = "proto3";

option csharp_namespace = "AElf.CrossChain";

import "aelf/core.proto";
import "kernel.proto";
import "google/protobuf/timestamp.proto";
import "acs7.proto";

message CrossChainRequest {
    int32 fromChainId = 1; // own chain id
    int64 nextHeight = 2;
    int32 listeningPort = 3;
}

//message SideChainResponse {
//    acs7.SideChainBlockData SideChainBlockData =1; 
//}
//
//message ParentChainResponse {
//    acs7.ParentChainBlockData ParentChainBlockData =1;
//}

message MerklePath {
    repeated aelf.Hash Path = 1;
}

message CrossChainExtraData{
    // Merkle tree root of side chain block headers
    aelf.Hash sideChainBlockHeadersRoot = 1;

    // Merkle tree root of side chain block transaction roots
    aelf.Hash sideChainTransactionsRoot = 2;
}
message HandShake {
    int32 listeningPort = 1;
    int32 fromChainId = 2;
    bool fromSideChain = 3;
    string host = 4;
}

message HandShakeReply {
    bool result = 1;
}

message SideChainInitializationRequest{
    int32 chainId = 1;
}

service ParentChainRpc {
    rpc RequestIndexingFromParentChainAsync (CrossChainRequest) returns (stream acs7.ParentChainBlockData) {}
//    rpc CrossChainHandShake (HandShake) returns (HandShakeReply) {}
    rpc RequestChainInitializationDataFromParentChainAsync (SideChainInitializationRequest) returns (acs7.ChainInitializationData) {}
}

service SideChainRpc{
    rpc RequestIndexingFromSideChainAsync (CrossChainRequest) returns (stream acs7.SideChainBlockData) {}
//    rpc CrossChainHandShake (HandShake) returns (HandShakeReply) {}
}

service BasicCrossChainRpc{
    rpc CrossChainHandShakeAsync (HandShake) returns (HandShakeReply) {}
}


