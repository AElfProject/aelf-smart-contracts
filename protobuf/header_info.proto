syntax = "proto3";

option csharp_namespace = "AElf.CrossChain";
import "common.proto";
import "crosschain.proto";

message RequestCrossChainBlockData {
    int32 SideChainId = 1; // parent(own) chain id
    int64 NextHeight = 2;
}

message ResponseSideChainBlockData {
    SideChainBlockData BlockData = 1;
    bool Success = 2;
}

message ResponseParentChainBlockData {
    ParentChainBlockData BlockData = 1;
    bool Success = 2;
}

message IndexingRequestMessage {
    int32 ListeningPort = 1;
    int32 SideChainId = 2;
    string CertificateFileName = 3;
}

message IndexingRequestResult {
    bool Result = 1;
}

service CrossChainRpc {
    rpc RequestSideChainDuplexStreaming (stream RequestCrossChainBlockData) returns (stream ResponseSideChainBlockData) {}
    rpc RequestSideChainServerStreaming (RequestCrossChainBlockData) returns (stream ResponseSideChainBlockData) {}
    rpc RequestParentChainDuplexStreaming (stream RequestCrossChainBlockData) returns (stream ResponseParentChainBlockData) {}
    rpc RequestParentChainServerStreaming (RequestCrossChainBlockData) returns (stream ResponseParentChainBlockData) {}
    rpc RequestIndexing (IndexingRequestMessage) returns (IndexingRequestResult) {}
}

message MerkleProofMessage {
    repeated Hash BlockMerkleProof = 1;
    repeated Hash TransactionMerkleProof = 2;
}

message VerificationNeededMessage {
    int32 SideChainId = 1;
    int64 BlockHeight = 2;
}

service MerkleProofInfoRpc {
    rpc MerkleProofInfo (VerificationNeededMessage) returns (MerkleProofMessage) {}
}
