syntax = "proto3";

import "common.proto";
import "core.proto";
import "aelf_options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.CrossChain";

service CrossChainContract {
    option (aelf.csharp_state) = "AElf.Contracts.CrossChain.CrossChainContractState";
    // Actions
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc RequestChainCreation (SideChainCreationRequest) returns (RequestChainCreationOutput) {
    }
    rpc WithdrawRequest (SInt32Value) returns (google.protobuf.Empty) {
    }
    rpc CreateSideChain (SInt32Value) returns (SInt32Value) {
    }
    rpc Recharge (RechargeInput) returns (google.protobuf.Empty) {
    }
    rpc RequestChainDisposal (SInt32Value) returns (Hash) {
    }
    rpc DisposeSideChain (SInt32Value) returns (SInt64Value) {
    }
    rpc RecordCrossChainData (CrossChainBlockData) returns (google.protobuf.Empty) {
    }
    
    rpc ChangOwnerAddress(Address) returns (google.protobuf.Empty) {
    }

    // Views
    rpc VerifyTransaction (VerifyTransactionInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    } 
    rpc CurrentSideChainSerialNumber (google.protobuf.Empty) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedToken (SInt32Value) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedAddress (SInt32Value) returns (Address) {
        option (aelf.is_view) = true;
    }
    rpc GetChainStatus (SInt32Value) returns (SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainHeight (SInt32Value) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetParentChainHeight (google.protobuf.Empty) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetParentChainId (google.protobuf.Empty) returns (SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedBalance (SInt32Value) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainIdAndHeight (google.protobuf.Empty) returns (SideChainIdAndHeightDict) {
        option (aelf.is_view) = true;
    }
    rpc GetAllChainsIdAndHeight (google.protobuf.Empty) returns (SideChainIdAndHeightDict) {
        option (aelf.is_view) = true;
    }
    rpc GetIndexedCrossChainBlockDataByHeight (SInt64Value) returns (CrossChainBlockData) {
        option (aelf.is_view) = true;
    }
    rpc GetBoundParentChainHeightAndMerklePathByHeight (SInt64Value) returns (CrossChainMerkleProofContext) {
        option (aelf.is_view) = true;
    }
    rpc GetChainInitializationContext(SInt32Value) returns (ChainInitializationInformation){
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    int32 parentChainId = 1;
    int64 creationHeightOnParentChain = 2;
}

message RechargeInput {
    int32 chainId = 1;
    sint64 amount = 2;
}

message RequestChainCreationOutput{
    int32 chainId =1;
    Hash proposalId = 2;
}

message VerifyTransactionInput {
    Hash transactionId = 1;
    repeated Hash path = 2;
    sint64 parentChainHeight = 3;
    int32 verifiedChainId = 4; 
}

// Events
message CreationRequested
{
    option (aelf.is_event) = true;
    Address creator = 1;
    int32 chainId = 2;
}

message Disposed
{
    option (aelf.is_event) = true;
    int32 chainId = 1;
}

message SideChainCreationRequest {
    int64 indexingPrice = 1;
    int64 lockedTokenAmount = 2;
    repeated ResourceTypeBalancePair resourceBalances = 3;
    bytes contractCode = 4;
}

message SideChainInfo {
    SideChainCreationRequest sideChainCreationRequest = 1;
    Address proposer = 2;
    SideChainStatus sideChainStatus = 3;
    int32 sideChainId = 4;
    Hash proposalHash = 5;
    google.protobuf.Timestamp creationTimestamp = 6;
    int64 creationHeightOnParentChain = 7;
}

// from crosschain.proto

message SideChainBlockData {
    int64 sideChainHeight = 1;
    Hash blockHeaderHash = 2;
    Hash transactionMerkleTreeRoot = 3;
    int32 sideChainId = 4;
}

message IndexedSideChainBlockDataResult {
    int64 height = 1;
    Address miner = 2;
    repeated SideChainBlockData sideChainBlockData = 3;
}

message ParentChainBlockData {
    int64 parentChainHeight = 1;
    CrossChainExtraData crossChainExtraData = 2;
    int32 parentChainId = 3;
    Hash transactionStatusMerkleRoot = 4;

    // Indexed block height from side chain and merkle path for this side chain block
    map<int64, MerklePath> indexedMerklePath = 5;
    map<string, bytes> extraData = 6;
}

message CrossChainExtraData{
    // Merkle tree root of side chain block headers
    Hash sideChainBlockHeadersRoot = 1;

    // Merkle tree root of side chain block transaction roots
    Hash sideChainTransactionsRoot = 2;
}

enum SideChainStatus
{
    Apply = 0;
    Review = 1;
    Active = 2;
    InsufficientBalance = 3;
    Terminated = 4;
}

message SideChainIdAndHeightDict{
    map<int32, int64> idHeightDict = 1;
}

message CrossChainBlockData {
    repeated SideChainBlockData sideChainBlockData = 1;
    repeated ParentChainBlockData parentChainBlockData = 2;
    int64 previousBlockHeight = 3;
}

message CrossChainMerkleProofContext{
    int64 boundParentChainHeight = 1;
    MerklePath merklePathForParentChainRoot = 2;
}

message ChainInitializationInformation{
    int32 chainId =1;
    Address creator = 2;
    google.protobuf.Timestamp CreationTimestamp = 3;
    repeated bytes extraInformation = 4;
    int64 creationHeightOnParentChain = 5;
}

// from resource.proto

enum ResourceType
{
    UndefinedResourceType = 0;
    Ram = 1;
    Cpu = 2;
    Net = 3;
}

message ResourceTypeBalancePair{
    ResourceType type = 1;
    uint64 amount = 2;
}
