syntax = "proto3";

import "aelf/core.proto";
import "google/protobuf/wrappers.proto";
import "acs1.proto";

option csharp_namespace = "AElf.Contracts.TokenHolder";

service TokenHolderContract {
    
    option (aelf.csharp_state) = "AElf.Contracts.TokenHolder.TokenHolderContractState";
    option (aelf.base) = "acs1.proto";
    
    // Actions
    rpc CreateScheme (CreateTokenHolderProfitSchemeInput) returns (google.protobuf.Empty) {
    }
    rpc AddBeneficiary (AddTokenHolderBeneficiaryInput) returns (google.protobuf.Empty) {
    }
    rpc RemoveBeneficiary (RemoveTokenHolderBeneficiaryInput) returns (google.protobuf.Empty) {
    }
    rpc ContributeProfits (ContributeProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc DistributeProfits (DistributeProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc RegisterForProfits (RegisterForProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc Withdraw (aelf.Address) returns (google.protobuf.Empty) {
    }
    // Views
    rpc GetScheme (aelf.Address) returns (TokenHolderProfitScheme) {
        option (aelf.is_view) = true;
    }
}

message CreateTokenHolderProfitSchemeInput {
    string symbol = 1;
}

message AddTokenHolderBeneficiaryInput {
    aelf.Address beneficiary = 1;
    sint64 shares = 2;
}

message RemoveTokenHolderBeneficiaryInput {
    aelf.Address beneficiary = 1;
}

message ContributeProfitsInput {
    aelf.Address scheme_manager = 1;
    sint64 amount = 2;
}

message DistributeProfitsInput {
    aelf.Address scheme_manager = 1;
    string symbol = 2;
}

message RegisterForProfitsInput {
    aelf.Address scheme_manager = 1;
    sint64 amount = 2;
}

message TokenHolderProfitScheme {
    string symbol = 1;
    aelf.Hash scheme_id = 2;
    sint64 period = 3;
}