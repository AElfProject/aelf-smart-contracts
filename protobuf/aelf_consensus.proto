syntax = "proto3";

option csharp_namespace = "AElf.Consensus.AElfConsensus";

import "common.proto";
import "google/protobuf/timestamp.proto";

// Just used as parameter of consensus contract method.
message ToUpdate {
    Hash OutValue = 1;// Calculated from current in value.
    Hash Signature = 2;// Calculated from current in value and signatures of previous round.
    int64 RoundId = 3;// To ensure the values to update will be apply to correct round by comparing round id.
    int32 PromiseTinyBlocks = 4;// This value is 1 by default, except this miner wanna produce tiny blocks in one time slot.
    Hash PreviousInValue = 5;// Publish previous in value for validation previous signature and previous out value.
    google.protobuf.Timestamp ActualMiningTime = 6;
    int32 SupposedOrderOfNextRound = 7;
    map<string, int32> TuneOrderInformation = 8;
    map<string, bytes> EncryptedInValues = 9;// For others to recover his in value of current round.
    map<string, bytes> DecryptedPreviousInValues = 10;
    int64 ProducedBlocks = 11;
    map<string, Hash> MinersPreviousInValues = 12;
}

// The miners public key list for each term.
message Miners {
    int64 TermNumber = 1;
    repeated bytes PublicKeys = 2;
}

// To query first round number of each term.
message TermNumberLookUp {
    map<int64, int64> Map = 1;// Term number -> Round number.
}

// All the candidates.
message Candidates {
    repeated bytes PublicKeys = 1;
}

// The ticket / voting information for one user.
message Tickets {
    repeated VotingRecord VotingRecords = 1;
    int64 VotingRecordsCount = 2;
    int64 ObtainedTickets = 3;
    int64 VotedTickets = 4;
    int64 HistoryObtainedTickets = 5;
    int64 HistoryVotedTickets = 6;
    repeated Hash VoteToTransactions = 8;
    repeated Hash VoteFromTransactions = 9;
    string PublicKey = 10;
}

// A voting record.
message VotingRecord {
    string From = 1;
    string To = 2;
    int64 Count = 3;
    int64 RoundNumber = 4;
    Hash TransactionId = 5;
    int64 VoteAge = 6;
    repeated int32 LockDaysList = 7;// Can be renewed by adding items.
    int64 UnlockAge = 8;
    int64 TermNumber = 9;
    google.protobuf.Timestamp UnlockTimestamp = 10;
    google.protobuf.Timestamp WithdrawTimestamp = 11;
    google.protobuf.Timestamp VoteTimestamp = 12;
    bool IsWithdrawn = 13;
}

// The snap shot of one term.
message TermSnapshot {
    int64 EndRoundNumber = 1;
    int64 TotalBlocks = 2;
    repeated CandidateInTerm CandidatesSnapshot = 3;
    int64 TermNumber = 4;
}

// The information of a candidate of a specific term.
message CandidateInTerm {
    string PublicKey = 1;
    Address Address = 2;
    int64 Votes = 3;
}

// The information of a round.
message Round {
    int64 RoundNumber = 1;
    map<string, MinerInRound> RealTimeMinersInformation = 2;
    int64 MainChainMinersRoundNumber = 3;
    int64 BlockchainAge = 4;
    string ExtraBlockProducerOfPreviousRound = 7;
    int64 TermNumber = 8;
}

// The information of a miner in a specific round.
message MinerInRound {
    int32 Order = 1;
    bool IsExtraBlockProducer = 2;
    Hash InValue = 3;
    Hash OutValue = 4;
    Hash Signature = 5;
    google.protobuf.Timestamp ExpectedMiningTime = 6;
    int64 ProducedBlocks = 7;
    int64 MissedTimeSlots = 8;
    string PublicKey = 9;
    int32 PromisedTinyBlocks = 10;
    string Alias = 11;
    Hash PreviousInValue = 12;
    int32 SupposedOrderOfNextRound = 13;
    int32 FinalOrderOfNextRound = 14;
    google.protobuf.Timestamp ActualMiningTime = 15;// Miners must fill actual mining time when they do the mining.
    map<string, bytes> EncryptedInValues = 16;
    map<string, bytes> DecryptedPreviousInValues = 17;
}

// The information of a candidate.
message CandidateInHistory {
    string PublicKey = 1;
    repeated int64 Terms = 2;
    int64 ProducedBlocks = 3;
    int64 MissedTimeSlots = 4;
    int64 ContinualAppointmentCount = 5;
    int64 ReappointmentCount = 6;
    repeated string Aliases = 7;
    string CurrentAlias = 8;
    int64 CurrentVotesNumber = 9;
    Address Address = 11;
    Hash AnnouncementTransactionId = 12;
    bool IsEvilNode = 13;
}

message TicketsDictionary {
    map<string, Tickets> Maps = 1;
}

message CandidateInHistoryDictionary {
    map<string, CandidateInHistory> Maps = 1;
    int32 CandidatesNumber = 3;
}

message TicketsHistories {
    repeated TicketsHistory Values = 1;
    int64 HistoriesNumber = 2;
}

message TicketsHistory {
    string CandidateAlias = 1;
    int64 VotesNumber = 2;
    google.protobuf.Timestamp Timestamp = 3;
    bool State = 4;
    TicketsHistoryType Type = 5;
}

enum TicketsHistoryType {
    None = 0;
    Redeem = 1;
    Vote = 2;
}

message AElfConsensusHeaderInformation {
    bytes sender_publicKey = 1;
    Round round = 2;
    AElfConsensusBehaviour behaviour = 3;
}

message AElfConsensusHint {
    AElfConsensusBehaviour behaviour = 1;
}

enum AElfConsensusBehaviour {
    UpdateValue = 0;
    NextRound = 1;
    NextTerm = 2;
    UpdateValueWithoutPreviousInValue = 3;
    Nothing = 4;
}

message AElfConsensusTriggerInformation {
    bytes public_key = 1;// A must-have.
    Hash random_hash = 2;// To calculate In Value.
    Hash previous_random_hash = 3;// Random hash of previous round for validation.
    AElfConsensusBehaviour behaviour = 4;
}

message CommandInput {
    bytes PublicKey = 1;
}

message InitialAElfConsensusContractInput {
    Hash election_contract_system_name = 1;
    sint64 lock_token_for_election = 2;
    bool is_term_changeable = 3;// If this is false, will always use initial miners to do the mining.
    bool is_side_chain = 4;
    sint32 days_each_term = 5;
}

message TermInfo {
    sint64 termNumber = 1;
    sint64 roundNumber = 2;
}

message VoteInput {
    string candidatePublicKey = 1;
    sint64 amount = 2;
    sint32 lockTime = 3;
}

message PageInfo {
    sint32 start = 1;
    sint32 length = 2;
}

message PageableTicketsInfoInput {
    sint32 start = 1;
    sint32 length = 2;
    string publicKey = 3;
}

message PageableElectionInfoInput {
    sint32 start = 1;
    sint32 length = 2;
    sint32 orderBy = 3;
}

message Alias {
    string value = 1;
}

message PublicKey {
    string hex = 1;
}

message FriendlyString {
    string value = 1;
}

message MinerListWithRoundNumber {
    Miners MinerList = 1;
    int64 RoundNumber = 4;
}

message SendDividendsInput {
    Address to = 1;
    sint64 amount = 2;
}

message AddDividendsInput {
    sint64 termNumber = 1;
    sint64 dividendsAmount = 2;
}

message WeightsInfo {
    sint64 termNumber = 1;
    sint64 weights = 2;
}

message VoteInfo {
    VotingRecord record = 1;
    sint64 age = 2;
}

message CheckDividendsInput {
    sint64 termNumber = 1;
    sint64 ticketsAmount = 2;
    sint32 lockTime = 3;
}

message SetBlockchainAgeInput {
    sint64 time = 1;
    TimeUnit unit = 2;
}

enum TimeUnit {
    Hours = 0;
    Days = 1;
    Months = 2;
}
