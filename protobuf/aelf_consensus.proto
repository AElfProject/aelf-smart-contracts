syntax = "proto3";

option csharp_namespace = "AElf.Consensus.AElfConsensus";

import "common.proto";
import "kernel.proto";
import "google/protobuf/timestamp.proto";

message InitialAElfConsensusContractInput {
    Hash election_contract_system_name = 1;
    bool is_term_stay_one = 2;
    bool is_side_chain = 3;
    TimeUnit base_time_unit = 4;
}

// Just used as parameter of consensus contract method.
message ToUpdate {
    Hash OutValue = 1;// Calculated from current in value.
    Hash Signature = 2;// Calculated from current in value and signatures of previous round.
    int64 RoundId = 3;// To ensure the values to update will be apply to correct round by comparing round id.
    int32 PromiseTinyBlocks = 4;// This value is 1 by default, except this miner wanna produce tiny blocks in one time slot.
    Hash PreviousInValue = 5;// Publish previous in value for validation previous signature and previous out value.
    google.protobuf.Timestamp ActualMiningTime = 6;
    int32 SupposedOrderOfNextRound = 7;
    map<string, int32> TuneOrderInformation = 8;
    map<string, bytes> EncryptedInValues = 9;// For others to recover his in value of current round.
    map<string, bytes> DecryptedPreviousInValues = 10;
    int64 ProducedBlocks = 11;
    map<string, Hash> MinersPreviousInValues = 12;
}

// The miners public key list for each term.
message Miners {
    int64 TermNumber = 1;
    repeated bytes PublicKeys = 2;
}

// To query first round number of each term.
message TermNumberLookUp {
    map<int64, int64> Map = 1;// Term number -> Round number.
}

// All the candidates.
message Candidates {
    repeated bytes PublicKeys = 1;
}

// The information of a round.
message Round {
    int64 RoundNumber = 1;
    map<string, MinerInRound> RealTimeMinersInformation = 2;
    int64 MainChainMinersRoundNumber = 3;
    int64 BlockchainAge = 4;
    string ExtraBlockProducerOfPreviousRound = 7;
    int64 TermNumber = 8;
}

// The information of a miner in a specific round.
message MinerInRound {
    int32 Order = 1;
    bool IsExtraBlockProducer = 2;
    Hash InValue = 3;
    Hash OutValue = 4;
    Hash Signature = 5;
    google.protobuf.Timestamp ExpectedMiningTime = 6;
    int64 ProducedBlocks = 7;
    int64 MissedTimeSlots = 8;
    string PublicKey = 9;
    int32 PromisedTinyBlocks = 10;
    string Alias = 11;
    Hash PreviousInValue = 12;
    int32 SupposedOrderOfNextRound = 13;
    int32 FinalOrderOfNextRound = 14;
    google.protobuf.Timestamp ActualMiningTime = 15;// Miners must fill actual mining time when they do the mining.
    map<string, bytes> EncryptedInValues = 16;
    map<string, bytes> DecryptedPreviousInValues = 17;
}

message AElfConsensusHeaderInformation {
    bytes sender_publicKey = 1;
    Round round = 2;
    AElfConsensusBehaviour behaviour = 3;
}

message AElfConsensusHint {
    AElfConsensusBehaviour behaviour = 1;
}

enum AElfConsensusBehaviour {
    UpdateValue = 0;
    NextRound = 1;
    NextTerm = 2;
    UpdateValueWithoutPreviousInValue = 3;
    Nothing = 4;
}

message AElfConsensusTriggerInformation {
    bytes public_key = 1;// A must-have.
    Hash random_hash = 2;// To calculate In Value.
    Hash previous_random_hash = 3;// Random hash of previous round for validation.
    AElfConsensusBehaviour behaviour = 4;
}

message CommandInput {
    bytes PublicKey = 1;
}

message TermInfo {
    sint64 termNumber = 1;
    sint64 roundNumber = 2;
}

message MinerListWithRoundNumber {
    Miners MinerList = 1;
    int64 RoundNumber = 4;
}