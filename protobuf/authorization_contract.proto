syntax = "proto3";

import "common.proto";
import "auth.proto";
import "aelf_options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.Authorization";

service AuthorizationContract {
    option (aelf.csharp_state) = "AElf.Contracts.Authorization.AuthorizationContractState";
    // Actions
    rpc Initialize(AuthorizationContractInitializationInput) returns (google.protobuf.Empty){        
    }    
    rpc CreateMultiSigAccount (Authorization) returns (Address) {
    }
    rpc Propose (Proposal) returns (Hash) {
    }
    rpc SayYes (Approval) returns (google.protobuf.BoolValue) {
    }
    rpc Release (Hash) returns (google.protobuf.Empty) {
    }
    // Views
    rpc GetProposal(Hash) returns (GetProposalOutput) {
    }
    
    rpc GetAuthorization (Address) returns (Authorization) {
        option (aelf.is_view) = true;
    }
    rpc IsMultiSigAccount (Address) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
}

message AuthorizationContractInitializationInput{
    Address genesis = 1;
    Address director =2;
    Hash tokenContractSystemName = 3;
    Hash consensusContractSystemName = 4;
}

message GetProposalOutput{
    Proposal proposal = 1;
    ProposalStatus status = 2;
    bool canBeReleased = 3;
}