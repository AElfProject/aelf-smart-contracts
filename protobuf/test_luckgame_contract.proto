syntax = "proto3";

import "aelf/options.proto";
import "aelf/core.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.TestContract.LuckGame";

service LuckGameContract {
    option (aelf.csharp_state) = "AElf.Contracts.TestContract.LuckGame.LuckGameContractState";
    //Actions
    rpc InitializeLuckGame(InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc ActiveLuckGame(google.protobuf.Empty) returns (google.protobuf.Empty){
    }
    rpc NewRound(google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc EndRound(google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc Transfer(aelf.Address) returns (google.protobuf.Empty) {
    }
    rpc PlayBet(BetInput) returns (BetInfo) {
    }
    rpc WithdrawReward(BetInfo) returns (google.protobuf.Empty) {
    }
    
    //View
    rpc QueryExceptedReward(BetInput) returns (ExceptReward) {
    }
    rpc QueryBetResult(aelf.Hash) returns (BetRecord) {
    }
    rpc QueryUserBetResults(aelf.Address) returns (BetRecords){
    }
}

//Input
enum BetType {
    Invalid = 0;
    Big = 1;
    Small = 2;
}

message InitializeInput {
    TokenType tokens = 1;
}

message TokenType {
    repeated string symbols = 1;
}

message BetInput {
    BetType bet_type = 1;
    int32 bet_number = 2;
    string symbol = 3;
    int64 bet_amount = 4;
}

message BetInfo {
    int32 round = 1;
    aelf.Hash bet_id = 2;
}

message BetInfos {
    repeated BetInfo infos = 1;
}

//Output
message ExceptReward {
    int64 value = 1;    
}

message BetRecord {
    aelf.Hash bet_id = 1;
    BetType bet_type = 2;
    int32 bet_number = 3;
    string symbol = 4;
    int64 bet_amount = 5;
    int32 round = 6;
    int32 luck_number = 7;
}

message BetRecords {
    repeated BetRecord Records = 1;
}

message RewardRecords {
    repeated BetInfo active_rewards = 1;
    repeated BetInfo withdrawn_rewards = 2;
}