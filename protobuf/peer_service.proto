syntax = "proto3";

option csharp_namespace = "AElf.OS.Network.Grpc";

import "kernel.proto";
import "network_types.proto";
import "aelf/core.proto";

service PeerService {
    rpc RequestBlock (BlockRequest) returns (BlockReply) {}
    rpc RequestBlocks (BlocksRequest) returns (BlockList) {}
    
    rpc Announce (PeerNewBlockAnnouncement) returns (VoidReply) {}
    rpc SendTransaction (aelf.Transaction) returns (VoidReply) {}

    rpc Connect (Handshake) returns (ConnectReply) {}
    
    rpc Disconnect (DisconnectReason) returns (VoidReply) {}
    
    rpc GetConnectedPeers(PeersRequest) returns (PeersResponse){}
}

// **** Connection *****

message ConnectReply {
    Handshake handshake = 1;
    AuthError err = 2;
}

enum AuthError {
    NONE = 0;
    UNKNOWN_ERROR = 1;
    WRONG_SIG = 2;
    WRONG_AUTH = 3;
    INVALID_HANDSHAKE = 4;
    INVALID_PEER = 5;
    CHAIN_MISMATCH = 6;
    PROTOCOL_MISMATCH = 7;
    CONNECTION_REFUSED = 8;
}

// **** Blocks *****

message BlocksRequest {
    aelf.Hash previous_block_hash = 1;
    int32 count = 2;
}

message BlockList {
    repeated BlockWithTransactions blocks = 1;
}

message DisconnectReason {
    Reason why = 1;
    enum Reason {
        SHUTDOWN = 0;
    }
}

message Announcement {
    aelf.BlockHeader header = 1;
}

message BlockRequest {
    aelf.Hash hash = 1;
}

message BlockReply {
    string error = 1;
    BlockWithTransactions block = 2;
}

// **** No reply *****

message VoidReply {
}

message PeersRequest{
    
}

message PeersResponse{
    repeated string ip_list = 1;
}


