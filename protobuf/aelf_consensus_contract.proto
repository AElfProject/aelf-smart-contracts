syntax = "proto3";

import "common.proto";
import "aelf_consensus.proto";
import "aelf_options.proto";
import "core.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "AElf.Contracts.Consensus.AElfConsensus";

service AElfConsensusContract {
    option (aelf.csharp_state) = "AElf.Contracts.Consensus.AElfConsensus.AElfConsensusContractState";
    // Actions
    // -> Process
    rpc InitialAElfConsensusContract (InitialAElfConsensusContractInput) returns (google.protobuf.Empty) {
    }
    rpc FirstRound (Round) returns (google.protobuf.Empty) {
    }
    rpc UpdateValue (ToUpdate) returns (google.protobuf.Empty) {
    }
    rpc NextRound (Round) returns (google.protobuf.Empty) {
    }
    rpc NextTerm (Round) returns (google.protobuf.Empty) {
    }
    rpc GetLIBOffset (google.protobuf.Empty) returns (SInt64Value) {
    }
    
    // Views
    rpc GetConsensusCommand (CommandInput) returns (ConsensusCommand) {
        option (aelf.is_view) = true;
    }
    rpc GetInformationToUpdateConsensus (AElfConsensusTriggerInformation) returns (AElfConsensusHeaderInformation) {
        option (aelf.is_view) = true;
    }
    rpc GenerateConsensusTransactions (AElfConsensusTriggerInformation) returns (TransactionList) {
        option (aelf.is_view) = true;
    }
    rpc ValidateConsensusBeforeExecution (AElfConsensusHeaderInformation) returns (ValidationResult) {
        option (aelf.is_view) = true;
    }
    rpc ValidateConsensusAfterExecution (AElfConsensusHeaderInformation) returns (ValidationResult) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentMiners (google.protobuf.Empty) returns (Miners) {
        option (aelf.is_view) = true;
    }
    rpc GetRoundInformation (SInt64Value) returns (Round) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentRoundNumber (google.protobuf.Empty) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentRoundInformation (google.protobuf.Empty) returns (Round) {
        option (aelf.is_view) = true;
    }
    rpc GetPreviousRoundInformation (google.protobuf.Empty) returns (Round) {
        option (aelf.is_view) = true;
    }
}

// Events
message IrreversibleBlockFound {
    option (aelf.is_event) = true;
    sint64 offset = 1;
}
