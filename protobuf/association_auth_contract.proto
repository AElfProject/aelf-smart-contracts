syntax = "proto3";

import "common.proto";
import "aelf_options.proto";
import "acs3.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
option csharp_namespace = "AElf.Contracts.AssociationAuth";

service AssociationAuthContract {
    option (aelf.csharp_state) = "AElf.Contracts.AssociationAuth.AssociationAuthState";
    option (aelf.base) = "acs3.proto";
    // Actions
    rpc Initialize(AssociationAuthContractInitializationInput) returns (google.protobuf.Empty){
    }
//    rpc CreateProposal (CreateProposalInput) returns (Hash) {
//    }
    
    rpc CreateOrganization (CreateOrganizationInput) returns (Address) {        
    }
    rpc GetOrganization (Address) returns (Organization) {
        option (aelf.is_view) = true;
    }
    rpc GetProposal(Hash) returns (GetProposalOutput) {
        option (aelf.is_view) = true;
    }
}

message CreateOrganizationInput{
    repeated Reviewer reviewers = 1;
    int32 executionThreshold = 2;
    int32 proposerThreshold = 3;
}

message Organization{
    int32 executionThreshold = 1;
    repeated Reviewer reviewers = 2;
    int32 proposerThreshold = 3;
    Address organizationAddress = 4;
}

message Reviewer {
    bytes pubKey = 1;
    int32 weight = 2;
}

message AssociationAuthContractInitializationInput{
    Address director = 1;
    Hash proposalContractSystemName = 2;
}

message GetProposalOutput{
    Hash proposalHash = 1;
    string contractMethodName = 2;
    Address toAddress = 3;
    bytes params = 4;
    google.protobuf.Timestamp expiredTime = 5;
    Address organizationAddress = 6;
    Address proposer = 7;
    bool CanBeReleased = 8;
}

enum ProposalStatus{
    Active = 0;
    Released = 1;
    Expired = 2;
}