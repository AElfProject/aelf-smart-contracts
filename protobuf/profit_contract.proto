syntax = "proto3";

package profit;

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "AElf.Contracts.Profit";

service ProfitContract {

    option (aelf.csharp_state) = "AElf.Contracts.Profit.ProfitContractState";

    // Actions
    rpc CreateProfitItem (CreateProfitItemInput) returns (aelf.Hash) {
    }
    rpc SetTreasuryProfitId (aelf.Hash) returns (google.protobuf.Empty) {
    }
    rpc AddWeight (AddWeightInput) returns (google.protobuf.Empty) {
    }
    rpc SubWeight (SubWeightInput) returns (google.protobuf.Empty) {
    }
    rpc AddWeights (AddWeightsInput) returns (google.protobuf.Empty) {
    }
    rpc SubWeights (SubWeightsInput) returns (google.protobuf.Empty) {
    }
    rpc AddProfits (AddProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc Profit (ProfitInput) returns (google.protobuf.Empty) {
    }
    rpc ReleaseProfit (ReleaseProfitInput) returns (google.protobuf.Empty) {
    }
    rpc RegisterSubProfitItem (RegisterSubProfitItemInput) returns (google.protobuf.Empty) {
    }
    rpc CancelSubProfitItem (CancelSubProfitItemInput) returns (google.protobuf.Empty) {
    }
    
    // Views
    rpc GetCreatedProfitIds (GetCreatedProfitIdsInput) returns (CreatedProfitIds) {
        option (aelf.is_view) = true;
    }
    rpc GetProfitItem (aelf.Hash) returns (ProfitItem) {
        option (aelf.is_view) = true;
    }
    rpc GetProfitItemVirtualAddress (GetProfitItemVirtualAddressInput) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetReleasedProfitsInformation (GetReleasedProfitsInformationInput) returns (ReleasedProfitsInformation) {
        option (aelf.is_view) = true;
    }
    rpc GetProfitDetails (GetProfitDetailsInput) returns (ProfitDetails) {
        option (aelf.is_view) = true;
    }
    rpc GetProfitAmount (ProfitInput) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetTreasuryProfitId (google.protobuf.Empty) returns (aelf.Hash) {
        option (aelf.is_view) = true;
    }
    rpc GetContractProfitItem (aelf.Address) returns (ProfitItem) {
        option (aelf.is_view) = true;
    }
}

message CreateProfitItemInput {
    sint64 profit_receiving_due_period_count = 1;
    bool is_release_all_balance_every_time_by_default = 2;
}

message ProfitItem {
    aelf.Address virtual_address = 1;
    sint64 total_weight = 2;
    map<string, sint64> total_amounts = 3;// token_symbol -> total_amount
    sint64 current_period = 4;
    repeated SubProfitItem sub_profit_items = 7;
    aelf.Address creator = 8;
    sint64 profit_receiving_due_period_count = 9;
    bool is_release_all_balance_everytime_by_default = 10;
    bool is_treasury_profit_item = 11;
    aelf.Hash profit_id = 12;
    string symbol = 13;
}

message SubProfitItem {
    aelf.Hash profit_id = 1;
    sint64 weight = 2;
}

message AddWeightInput {
    aelf.Address receiver = 1;
    aelf.Hash profit_id = 2;
    sint64 weight = 3;
    sint64 end_period = 4;
}

message SubWeightInput {
    aelf.Address receiver = 1;
    aelf.Hash profit_id = 2;
}

message AddWeightsInput {
    aelf.Hash profit_id = 1;
    repeated WeightMap weights = 2;
    sint64 end_period = 4;
}

message SubWeightsInput {
    repeated aelf.Address receivers = 1;
    aelf.Hash profit_id = 2;
}

message WeightMap {
    aelf.Address receiver = 1;
    sint64 weight = 2;
}

message ProfitInput {
    aelf.Hash profit_id = 1;
    string symbol = 2;
}

message ReleaseProfitInput {
    aelf.Hash profit_id = 1;
    sint64 period = 2;
    sint64 amount = 3;
    sint64 total_weight = 4;
    string symbol = 5;
}

message ProfitDetails {
    repeated ProfitDetail Details = 1;
}

message ProfitDetail {
    sint64 start_period = 1;
    sint64 end_period = 2;
    sint64 weight = 3;
    sint64 last_profit_period = 4;
}

message AddProfitsInput {
    aelf.Hash profit_id = 1;
    sint64 amount = 2;
    sint64 period = 3;
    string symbol = 4;
}

message RegisterSubProfitItemInput {
    aelf.Hash profit_id = 1;
    aelf.Hash sub_profit_id = 2;
    sint64 sub_item_weight = 3;
}

message CancelSubProfitItemInput {
    aelf.Hash profit_id = 1;
    aelf.Hash sub_profit_id = 2;
    aelf.Address sub_item_creator = 3;
}

message ReleasedProfitsInformation {
    sint64 total_weight = 1;
    map<string, sint64> profits_amount = 2;
    bool is_released = 3;
}

message CreatedProfitIds {
    repeated aelf.Hash ProfitIds = 1;
}

message GetCreatedProfitIdsInput {
    aelf.Address creator = 1;
}

message GetProfitItemVirtualAddressInput {
    aelf.Hash profit_id = 1;
    sint64 period = 2;
}

message GetReleasedProfitsInformationInput {
    aelf.Hash profit_id = 1;
    sint64 period = 2;
}

message GetProfitDetailsInput {
    aelf.Hash profit_id = 1;
    aelf.Address receiver = 2;
}
