syntax = "proto3";

option csharp_namespace = "AElf.CrossChain";

import "common.proto";
import "resource.proto";
import "kernel.proto";

message SideChainBlockData {
    uint64 SideChainHeight = 1;
    Hash BlockHeaderHash = 2;
    Hash TransactionMKRoot = 3;
    int32 SideChainId = 4;
}

message IndexedSideChainBlockDataResult {
    uint64 Height = 1;
    Address Miner = 2;
    repeated SideChainBlockData SideChainBlockData = 3;
}

message ParentChainBlockData {
    ParentChainBlockRootInfo Root = 1;

    // Indexed block height from side chain and merkle path for this side chain block
    map<uint64, MerklePath> IndexedMerklePath = 2;
}

message ParentChainBlockRootInfo
{
    uint64 ParentChainHeight = 1;
    // Merkle tree root of side chain block headers
    Hash SideChainBlockHeadersRoot = 2;

    // Merkle tree root of side chain block transaction roots
    Hash SideChainTransactionsRoot = 3;
    int32 ParentChainId = 4;
}

enum SideChainStatus
{
    Apply = 0;
    Review = 1;
    Active = 2;
    InsufficientBalance = 3;
    Terminated = 4;
}

message SideChainInfo {
    uint64 IndexingPrice = 1;
    uint64 LockedTokenAmount = 2;
    repeated ResourceTypeBalancePair ResourceBalances = 3; 
    bytes ContractCode = 4;
    Address Proposer = 5;
    SideChainStatus SideChainStatus = 6;
    int32 SideChainId = 7;
    Hash ProposalHash = 8;
}

message CrossChainBlockData {
    repeated SideChainBlockData SideChainBlockData = 1;
    repeated ParentChainBlockData ParentChainBlockData = 2;
}