syntax = "proto3";

package election;

import "aelf/options.proto";
import "aelf/core.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.Election";

service ElectionContract {
    option (aelf.csharp_state) = "AElf.Contracts.Election.ElectionContractState";

    // Action
    rpc InitialElectionContract (InitialElectionContractInput) returns (google.protobuf.Empty) {
    }
    rpc AnnounceElection (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc QuitElection (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc Vote (VoteMinerInput) returns (google.protobuf.Empty) {
    }
    rpc Withdraw (aelf.Hash) returns (google.protobuf.Empty) {
    }
    rpc UpdateTermNumber (UpdateTermNumberInput) returns (google.protobuf.Empty) {
    }

    // View
    rpc GetElectionResult (GetElectionResultInput) returns (ElectionResult) {
        option (aelf.is_view) = true;
    }
    rpc GetTicketsInformation (StringInput) returns (ElectionTickets) {
        option (aelf.is_view) = true;
    }
    rpc GetPageableNotWithdrawnTicketsInfo (PageableElectionTicketsInfoInput) returns (ElectionTickets) {
        option (aelf.is_view) = true;
    }
    rpc QueryAlias (StringInput) returns (StringOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetTicketsCount (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetPageableCandidatesHistoryInfo (PageInfo) returns (CandidateHistoryDictionary) {
        option (aelf.is_view) = true;
    }
    rpc GetPageableTicketsHistories (PageableElectionTicketsInfoInput) returns (ElectionTicketsHistories) {
        option (aelf.is_view) = true;
    }
    rpc GetVotesCount (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc QueryCurrentDividendsForVoters (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
}


message InitialElectionContractInput {
    aelf.Hash vote_contract_system_name = 1;
    aelf.Hash token_contract_system_name = 2;
}

message AnnounceElectionInput {
    string alias = 1;
}

message VoteMinerInput {
    string candidate_publicKey = 1;
    sint64 amount = 2;
    sint32 lockTime = 3;
    LockTimeUnit LockTimeUnit = 4;
}

message UpdateTermNumberInput {
    sint32 term_number = 1;
}

message GetElectionResultInput {
    sint32 term_number = 1;
}

message ElectionResult {
    sint32 term_number = 1;
    map<string, sint64> results = 2;
    bool is_active = 3;
}

message Votes {
    repeated aelf.Hash active_votes = 1;
    repeated aelf.Hash withdrawn_votes = 2;
}

message CandidateHistory {
    string PublicKey = 1;
    repeated int64 Terms = 2;
    int64 ProducedBlocks = 3;
    int64 MissedTimeSlots = 4;
    int64 ContinualAppointmentCount = 5;
    int64 ReappointmentCount = 6;
    repeated string Aliases = 7;
    string CurrentAlias = 8;
    int64 CurrentVotesNumber = 9;
    aelf.Address Address = 11;
    aelf.Hash AnnouncementTransactionId = 12;
    bool IsEvilNode = 13;
}

enum LockTimeUnit {
    Days = 0;
    Mouths = 1;
}

// The ticket / voting information for one user.
message ElectionTickets {
    repeated ElectionVotingRecord election_voting_records = 1;
    int64 VotingRecordsCount = 2;
    int64 ObtainedTickets = 3;
    int64 VotedTickets = 4;
    int64 HistoryObtainedTickets = 5;
    int64 HistoryVotedTickets = 6;
    repeated aelf.Hash VoteToTransactions = 8;
    repeated aelf.Hash VoteFromTransactions = 9;
    string PublicKey = 10;
}

message ElectionVotingRecord {
    string From = 1;
    string To = 2;
    int64 Count = 3;
    int64 RoundNumber = 4;
    aelf.Hash TransactionId = 5;
    int64 VoteAge = 6;
    repeated int32 LockDaysList = 7;// Can be renewed by adding items.
    int64 UnlockAge = 8;
    int64 TermNumber = 9;
    google.protobuf.Timestamp UnlockTimestamp = 10;
    google.protobuf.Timestamp WithdrawTimestamp = 11;
    google.protobuf.Timestamp VoteTimestamp = 12;
    bool IsWithdrawn = 13;
}

message PageableElectionTicketsInfoInput {
    sint32 start = 1;
    sint32 length = 2;
    string publicKey = 3;
}

message PageInfo {
    sint32 start = 1;
    sint32 length = 2;
}

message CandidateHistoryDictionary {
    map<string, CandidateHistory> Maps = 1;
    int32 CandidatesNumber = 3;
}

message ElectionTicketsHistories {
    repeated ElectionTicketsHistory Values = 1;
    int64 HistoriesNumber = 2;
}

message ElectionTicketsHistory {
    string CandidateAlias = 1;
    int64 VotesNumber = 2;
    google.protobuf.Timestamp Timestamp = 3;
    bool State = 4;
    ElectionTicketsHistoryType Type = 5;
}

enum ElectionTicketsHistoryType {
    None = 0;
    Redeem = 1;
    Vote = 2;
}

message StringInput {
    string value = 1;
}

message StringOutput {
    string value = 1;
}