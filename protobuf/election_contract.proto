syntax = "proto3";

package election;

import "aelf_options.proto";
import "common.proto";
import "kernel.proto";
import "vote.proto";
import "election.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "AElf.Contracts.Election";

service ElectionContract {
    option (aelf.csharp_state) = "AElf.Contracts.Election.ElectionContractState";

    // Action
    rpc InitialElectionContract (InitialElectionContractInput) returns (google.protobuf.Empty) {
    }
    rpc SetInitialMiners (PublicKeysList) returns (google.protobuf.Empty) {
    }
    rpc RegisterElectionVotingEvent (RegisterElectionVotingEventInput) returns (google.protobuf.Empty) {
    }
    rpc CreateTreasury (CreateTreasuryInput) returns (google.protobuf.Empty) {
    }
    rpc RegisterToTreasury (RegisterToTreasuryInput) returns (google.protobuf.Empty) {
    }
    rpc ReleaseTreasuryProfits (ReleaseTreasuryProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc AnnounceElection (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc QuitElection (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc Vote (VoteMinerInput) returns (google.protobuf.Empty) {
    }
    rpc Withdraw (Hash) returns (google.protobuf.Empty) {
    }
    rpc UpdateCandidateInformation (UpdateCandidateInformationInput) returns (google.protobuf.Empty) {
    }

    // View
    rpc GetCandidates (google.protobuf.Empty) returns (PublicKeysList) {
        option (aelf.is_view) = true;
    }
    rpc GetCandidateHistory (StringInput) returns (CandidateHistory) {
        option (aelf.is_view) = true;
    }
    rpc GetVictories (google.protobuf.Empty) returns (PublicKeysList) {
        option (aelf.is_view) = true;
    }
    rpc GetTermSnapshot (GetTermSnapshotInput) returns (TermSnapshot) {
        option (aelf.is_view) = true;
    }
    rpc GetMinersCount (google.protobuf.Empty) returns (SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetElectionResult (GetElectionResultInput) returns (ElectionResult) {
        option (aelf.is_view) = true;
    }
    rpc GetVotesInformation (StringInput) returns (Votes) {
        option (aelf.is_view) = true;
    }
    rpc GetVotesInformationWithRecords (StringInput) returns (Votes) {
        option (aelf.is_view) = true;
    }
    rpc GetVotesInformationWithAllRecords (StringInput) returns (Votes) {
        option (aelf.is_view) = true;
    }
    rpc GetPageableNotWithdrawnTicketsInfo (PageableElectionTicketsInfoInput) returns (Votes) {
        option (aelf.is_view) = true;
    }
    rpc QueryAlias (StringInput) returns (StringOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetTicketsCount (google.protobuf.Empty) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetPageableCandidatesHistoryInfo (PageInfo) returns (CandidateHistoryDictionary) {
        option (aelf.is_view) = true;
    }
    rpc GetPageableTicketsHistories (PageableElectionTicketsInfoInput) returns (ElectionTicketsHistories) {
        option (aelf.is_view) = true;
    }
    rpc GetVotesCount (google.protobuf.Empty) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc QueryCurrentDividendsForVoters (google.protobuf.Empty) returns (SInt64Value) {
        option (aelf.is_view) = true;
    }
}